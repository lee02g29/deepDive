import ObjectBigO from "./components/ObjectBigO"
import Olog2n from "./components/Olog2n"
import Onlog2n from "./components/Onlog2n"

function App() {


  return (
    <>
      <h1>로그 시간 복잡도</h1>
      <Olog2n />
      <Onlog2n />
      <ObjectBigO />
    </>
  )
}

export default App

/*
  O(1) 상수시간
  O(n) 선형 복잡도
    n 입력값 크기
  O(n^2) 제곱 시간 복잡도
    입력값이 증가함에 따라 시간이 n의 제곱의 비율 만큼 증가
    0x) 버블 정렬
  O(2^n) 지수 시간 복잡도
  - 재귀 호출로 모든 경우의 수를 탐색할 때 사용
  - 순열이나 조합 알고리즘에서 등장
  O(n!) 팩토리얼 시간 복잡도
  - 순열이나 조합 알고리즘에서 등장

  최적화를 할 때 고려할 알고리즘 복잡도 순서
  O(1) -> O(log n) -> O(n) -> O(n log n) -> O(n^2) -> O(2^n) -> O(n!)

  상수(고정된 값)은 다 무시되어 표시됨
  ex) O(n + 1) -> O(n)

  ---

  공간 복잡도
  - 코드가 얼마나 많은 메모리를 사용하는지 측정

  시간복잡도와 공간복잡도
  - 시간복잡도는 코드의 속도를 측정, 공간 복잡도는 코드의 메모리 사용량을 측정
  - 시간 복잡도는 최악의 경우 모든 데이터를 사용하기 때문에 빅오 O(n)
  - 공간 복잡도는 추가 메모리를 사용하지 않고 단 하나의 변수만 사용하기 떄문애 O(1)
  
  
  ---

  알고리즘 문제 해결 접근법
  - 가장 좋은건 문제를 풀 때 패턴을 파악할 수 있는 것

  1. 문제 이해하기, 무엇이 중요한지 이해하는 단계
    - 주어진 문제를 내가 이해할 수 있도록 다시 정의
    - 문제에 해당하는 입력 값은 무엇인지
    - 출력값은 어떻게 나와야할지
    - 입력값이 출력값을 결정할 수 있는지
    - 문제의 일부은 중요한 데이터의 라벨을 어떻게 지정할지

  2. 구체적 예시
    - 간단한 예시 2~3개로 먼저 시작
    - 더 복잡한 예시로 진행
    - 조건 살펴보기
      - 빈 값이 들어왔을 때
      - 유효하지 않는 값이 들어왔을 때
  */