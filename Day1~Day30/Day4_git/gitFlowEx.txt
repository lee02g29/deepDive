- 개발자들끼리 협업을 한다
- 문제점 발생
    코드를 하나의 브랜치에서 사용을 하다보면 코드를 올릴 때 문제가 발생
- 그래서 브랜치 생성을 한다
    브랜치 : 새로운 작업 공간
- git flow 전략을 이용해서 브랜치를 활용한다
    5개의 브랜치
    main or master 브랜치
    develop 브랜치
    feature 브랜치
              --- feature / 기능 1 -> 병합 dev
              --- feature / 기능 2
    ㅁ --- ㅁ --- ㅁ v1.0 --- ㅁ release v2.0
   main   dev   release v1.0

   // 브랜치를 너무 많이 만든다
   // 개발자들이 짠 코드를 바로 앱으로 이용하는 사람들한테 바로 배포가 문제가 없다면
   // main, feature 브랜치만 운영하는 전략도 있다
   // trunk-based 전략

        --- feature1 / 기능 1
            --- feature2 / 기능 2
    ㅁ --- ㅁ --- ㅁ --- ㅁ
   main  


실행순서
1. 기능 추가, 버그 픽스가 필요하면 main 브랜치에서 새로운 브랜치를 만들어서 코드를 짠다. 
(**브랜치마다 이름을 잘 작성해야함)
2. 기능이 완성되면 main에 합친다
3. main 브랜치에 있는 코드를 필요할때마다 유저들에게 배포한다

- 대략적으로 git flow를 알고 있으면 응용이 가능할 정도로 학습

브랜치 위치를 확인하고 싶을 때
- git branch
- 아무것도 안나올 때 : 커밋이 하나도 없음 -> git commit 수행 후 확인

현재 브랜치 목록을 확인하고 싶을 때(특정 브랜치 존재 여부를 알고 싶을 때)
- git branch -a

git branch 브랜치 명

git branch -M main
-M 옵션은 강제 이동 및 강제 이름변경을 의미한다.(덮어쓰기)

다른 브랜치에서 main 브랜치 이동시 오류가 날 때( fatal: invaild reference: main )
- 문제 발생 이유 : 브랜치 생성을 했는데 -M에 의해 브랜치의 이름을 변경 -> 이전 브랜치(이름) 사라짐
- branch -M 브랜치 명을 했을 때 -> 새로 만드는 것이 아니라 덮어씌웠음 -> 따라서 이전 브랜치가 없음

git clone
- 원격 저장소(github, gitlab) 등에서 프로젝트를 로컬 환경으로 복사(다운로드)하는 명령어
- 원격 저장소에 있는 포든 파일, 폴더, 브랜치, 커밋 기록을 포함한 전체 프로젝트를 복사한다



참고 링크
https://blog.jetbrains.com/space/2023/04/18/space-git-flow/